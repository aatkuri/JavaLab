/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package library;

import exceptions.NoFineException;
import java.util.Date;

/**
 * Device represents a piece of mechanical or electronic equipment
 * @author Ashok Atkuri
 */
public class Device extends Item {
    /**
     * Unique ID of Device
     */
    private String deviceID;
    /**
     * Rack number of device in the library
     */
    private String rackNo;

    /**
     * Initialize the variables of super class. Assigns generateUniqueID() to
     * deviceID and generateRackID() to rackNo
     *
     * @param title title of Device
     */
    public Device(String title) {
        super(title);
        this.deviceID = generateUniqueID();
        this.rackNo = generateRackID();
    }   
    
    /**
     * Calculates the fine a member needs to pay to the library in dollars.
     * <br>
     * If return-date (dateTime2) is before due-date (dateTime1),
     * NoFineException is thrown with message "Return date is before due date".
     * <br>
     * Else,
     * <br>
     * If difference between hours is less than 1 then fine is 0.
     * <br>
     * else if difference between hours is in between [1,5] then fine is $5
     * <br>
     * else if difference between hours is in between (5,10] then fine is $10
     * <br>
     * else fine is $50
     *
     * @param dateTime1 Due date of an item in format "MM/dd/yyyy HH:mm:ss"
     * @param dateTime2 Actual return date of an item in format "MM/dd/yyyy
     * HH:mm:ss"
     * @return double Payable amount to library
     * @throws NoFineException if return date(dateTime2) is less than due
     * date(dateTime1)
     */
    @Override
    public double calculateFine(java.lang.String dateTime1,
                            java.lang.String dateTime2)
                     throws NoFineException{
        Date returnDate = new Date(dateTime1);
        Date dueDate = new Date(dateTime2);
        int daysdiff = 0;
        long diff = returnDate.getTime() - dueDate.getTime();
        long diffDays = diff / (60 * 60 * 1000);
        daysdiff = (int) diffDays;

        if (returnDate.before(dueDate)) {
            throw new NoFineException("Return date is before due date");
        } else {
            if (daysdiff < 1) {
                return 0.0;
            } else if (daysdiff >= 1 && daysdiff <= 5) {
                return 5.0;
            } else if (daysdiff > 7 && daysdiff <= 10) {
                return 10.0;
            } else {
                return 50.0;
            }
        }
    }

    /**
     * This method generates rack identification number to keep the device at a
     * particular location in the library . The rack ID is generated by using
     * the following algorithm.
     * <br>
     * <i>Beginning from the third character until the end of the device
     * title_D_length of the deviceID.</i>
     * <br>
     * However, we can have couple of exceptions.
     * <br>
     * If the first character is “I”, the rackID would include the first
     * character along with the given algorithm.
     * <br>
     * If the second character is “p”, the rackID would include the second
     * character along with the given algorithm.
     * <br>
     * <br>
     * <h3>Examples</h3>
     * <table border="1" summary="generates rack id">
     * <tbody><tr>
     * <th>Device Title</th>
     * <th>Rack ID</th>
     * </tr>
     * <tr>
     * <td> Android Charger</td>
     * <td> droid Charager_D_7 </td>
     * </tr>
     * <tr>
     * <td> Ifhone Charger</td>
     * <td> Ihone Charger_D_7</td>
     * </tr>
     * <tr>
     * <td> Phone</td>
     * <td> one_D_7</td>
     * </tr>
     * <tr>
     * <td> Ipfoen</td>
     * <td> Ipfoen_D_7</td>
     * </tr>
     * </tbody></table>
     *
     * @return String rack Number of Device
     */
    @Override
    public String generateRackID() {
          return getShortHandDeviceName(super.getTitle()) + "_D_" + this.deviceID.length();
    }
    
    //Method to get short hand name of title with given specification
    private String getShortHandDeviceName(String deviceName){
        if(deviceName.charAt(0) == 'I' && deviceName.charAt(1) == 'p')
            return deviceName.substring(0,2) + deviceName.substring(2);
        if(deviceName.charAt(0) == 'I')
            return deviceName.charAt(0) + deviceName.substring(2);
        if(deviceName.charAt(1) == 'p')
            return deviceName.charAt(1) + deviceName.substring(2);
       
        return deviceName.substring(2);
    }

    /**
     * This method concatenates LIBRARY_CODE, "_D_", counter and returns it.
     *
     * @return String Unique ID of Device
     */
    @Override
    public String generateUniqueID() {
        return LIBRARY_CODE + "_D_" + counter;
    }

    /**
     * Invoke super.toString() and concatenate <code>deviceID</code> and
     * <code>rackNo</code>.
     * <br>
     * For example:
     * <br>
     * <code>
     * Title: android charger, Available: false, DeviceID: NWM_D_3, RackNo: droid charger_D_7
     * </code>
     *
     * @return String representation of Device
     */
    @Override
    public String toString() {
         return super.toString()
                + ", DeviceID: "+deviceID 
                + ", RackNo: "+rackNo;
    }    
}
